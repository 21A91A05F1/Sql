9.
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
A:
select distinct (city) from station where city like 'A%' or city like 'E%' or city like 'I%' or city like 'O%' or city like 'U%' 
order by city asc;
========================================================================================================================================
10.
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
A:
select distinct (city) from station where city like '%a' or city like '%e' or city like '%i' or city like '%o' or city like '%u' ;
=========================================================================================================================================
11.
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. 
Your result cannot contain duplicates.
A:
select distinct (city) from station where (city like 'A%' or city like 'E%' or city like 'I%' or city like 'O%' or city like 'U%') 
and(city like '%a' or city like '%e' or city like '%i' or city like '%o' or city like '%u');
========================================================================================================================================
12.
Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
A:
select distinct (city) from station where city not like 'A%' or city not like 'E%' or city not like 'I%'
or city not like 'O%' or city not like 'U%' order by city asc;
=======================================================================================
13.
Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
A:
select name from Employee order by name;
=================================================================================================
14.
Query the Name of any student in STUDENTS who scored higher than 75 Marks.
Order your output by the last three characters of each name.
If two or more students both have names ending in the same last three characters
(i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
A:
select  name from students where marks>75 order by right(name,3), id asc; 
========================================================================================
15.
Write a query that prints a list of employee names (i.e.: the name attribute) 
for employees in Employee having a salary greater than 2000 per month
who have been employees for less than  10 months. 
Sort your result by ascending employee_id.
A:
select name from employee where salary>2000 and months<10 order by employee_id;
===============================================================================================
16.
Write a query identifying the type of each record in the TRIANGLES table 
using its three side lengths. 
Output one of the following statements for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
A:
select case
when a+b<=c or b+c<=a or c+a<=d then 'Not A Triangle';
when a=b and b=c then 'Equilateral';
when a=b or b=c or c=a then 'Isosceles';
else 'Scalene'
end
from triangles;
